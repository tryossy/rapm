==================================
■ gitとGitHubの初期設定 ■

----------------------------------
【gitの初期設定】

# ローカルマシン上でバージョン管理ソフトgitを使えるようにする。

1. gitが入っていない環境では sudo apt-get install git-all でインストールできる。（全学計算機システムにはインストール済み）

2. コマンドライン上で以下のようにgitのユーザ名とメールアドレスを設定。たとえばuser.nameをtarotez、user.emailをtez@sings.jpと設定したいなら以下のようにする。

git config --global user.name tarotez
git config --global user.email tez@sings.jp

設定できていることを確認するのはたとえば以下のように行う。

git config --global user.name

----------------------------------
【GitHubでのアカウント作成】

# オンラインでバージョン管理を行うGitHubにアカウントを作成(sign up)する。

1. 以下のページにてアカウントを作成する。無料アカウントの場合、GitHubにアップロードしたファイルはすべて公開になる。有料アカウントの場合、privateに設定することも可能。

https://github.com

学生は申請すればprivateを作れる。

https://education.github.com

アカウント作成後、GitHubからメールで送られてくるURLをクリックしてアカウントを認証(verify)する必要がある。

----------------------------------
【GitHubと通信するためのssh鍵の登録】

# ssh鍵の作成と登録

1. ssh鍵を置くディレクトリに cd ~/.ssh で移動。.sshが見つからないと言われる場合はmkdir ~/.sshで作成する。

2. コマンドプロンプトからssh-keygenと入力。

3. Enter file in which to save the keyと聞かれるので、任意のファイル名を指定。たとえばgithub_rsa。Pass phraseを聞かれたら何も入れずにEnter。これによってgithub_rsa（秘密鍵）とgithub_rsa.pub（公開鍵）が作られる。公開鍵は見せてもよいが秘密鍵は自分の所に取っておき、人には見せない。

4. ssh-addによって鍵の登録を行う。秘密鍵の名前がgithub_rsaの場合、ssh-add ~/.ssh/github_rsa。

5. 公開鍵のファイル（拡張子がpubで終わるファイル）の中身をcatで表示。cat ~/.ssh/github_rsa.pubなど。

6. ブラウザで https://github.com/settings/keys を表示し、右上にあるNew SSH keyをクリック。

7. 公開鍵の中身をコピペしてkeyの欄に入力。titleにはアクセス元の環境など、適当な名前を付けた上で、下にあるAdd SSH keyボタンをクリック。

8. ターミナルに戻り、ssh git@github.com。これによってYou've successfully authenticated, but GitHub does not provide shell access.と出れば成功。

==================================
■ 既存のリポジトリを使った作業 ■

----------------------------------
【リモートリポジトリのクローン】

# GitHub上に存在するリモートリポジトリをローカルにクローン（コピー）する。

1. 作業用ディレクトリを置くディレクトリ（たとえばホームディレクトリ）にcdで移動。

2. 以下のコマンドでリモートリポジトリからのクローンによってローカルリポジトリを作成する。たとえばrapmという名前のリモートリポジトリをローカルにrapm2という名前でクローンするなら以下。

git clone git@github.com:tarotez/rapm.git rapm2

（もしssh接続がうまく行かない場合は git clone https://github.com/tarotez/rapm.gitのようにhttps経由でクローンする方法もある）

3. cd rapm2 で移動し、ls -lartでファイルや.gitというディレクトリも作られていることを確認する。

----------------------------------
【ブランチの作成／ステージ／コミット】

# ファイルの作業用バージョンであるブランチを作成し、コミットする。

1. git statusと打ち込む。これによって自分が今、masterブランチにいることがわかる。

2. 以下のコマンドでfeatureという名前のブランチを作る。Switched to a new branch 'feature'と出れば成功。

git checkout -b feature

3. git branch と入力すると現在ローカルに存在するブランチの一覧が表示される。*が付いているのが現在作業中のブランチ。また、git statusでも現在の作業ブランチが分かる。

4. ファイルの編集や追加などを自由に行う。ただし.gitの中身は編集しないこと。

5. git add . で編集済みファイルをすべてステージする。（一部のファイルのみをステージしたい場合、git add filenameでfilenameのみstageできる）。

6. git commit でステージされているファイルをコミットする。git statusですべてコミットされていることを確認できる。エディタが立ち上がり、コミットの目的を聞かれるので、入力後、Escキーを押し、:wqを押して保存。それが面倒であれば git commit -m "..."とすることでエディタの起動を避けられる。

7. git status でローカルリポジトリ内にあるファイルの編集やコミットの現状を見れる。

8. 別のブランチ（たとえばmaster）に移る場合はgit chekout masterとすればよい。（-bオプションを付けると新しいブランチが作られるが、付けない場合は単にブランチ間の移動が行われる。

9. いったん編集中のファイルをすべて閉じた上で、git checkout masterでmasterブランチに戻る。そしてさきほど編集したファイルをまた開く。編集したはずの内容が変わっていないことを確認せよ。ふたたびgit checkout featureでfeatureブランチに戻り、編集内容が戻っていることを確認せよ。

10. 以下のように設定し、git logの出力を見やすくさせる。

git config --global alias.graph "log --graph --date-order --all --pretty=format:'%h %Cred%d %Cgreen%ad %Cblue%cn %Creset%s' --date=short"

11. git graphでこれまでのコミット履歴を表示させる。何回かファイル編集 → git add . → git commit を繰り返してからgit graphで確認せよ。

----------------------------------
【ブランチ間の比較／ブランチ間の移動／マージ】

1. git logで現在までのコミットの一覧が表示される。commitという文字の横に出てくる文字列がコミットハッシュである。

2. たとえばCOMHASHをコミットハッシュとすると、git show COMHASHでそのコミットの名前が見れる。コミットハッシュはgit logで表示されたものをコピペすればよい。

3. git diff comhash1 comhash2で2つのコミットの間の差分が表示される。

4. 別のブランチ（たとえばmaster）の内容を現在作業しているブランチと一致させる（マージさせる）にはgit merge masterと入力。競合がある場合、その旨表示されるため、修正を行えばマージできる。

5. 別のブランチと現在のブランチで競合が生じた時、git stashによって途中待避できる。

6. ブランチ（たとえばfeature）を取り除くには git branch -d featureとする。

----------------------------------
【リモートリポジトリへのプッシュ】

# リモートリポジトリに自分の更新内容を新規ブランチとしてアップロードする。

1. GitHub上でリモートリポジトリをフォークする。すなわちリモートリポジトリのページ（今回はhttps://github.com/tarotez/rapm）の右上にあるForkボタンをクリックする。

2. 以下のコマンドでフォークされたリポジトリmyaccount/rapm.gitの内容をローカルにコピーし、好きな名前（今回はorigin）を付ける。ただしmyaccountには自分のアカウント名が入る。

git remote add origin git@github.com:myaccount/rapm.git

3. 以下のようにローカルのfeatureブランチをリモート（origin）のbranch nameブランチにpushする。branchnameには自分のアカウント名など、好きな名前を付けてよい。

git push -u origin feature:branchname

あるいはローカルとリモートでブランチ名を共にfeatureという名前にする場合は以下でもよい。

git push -u origin feature

もしもローカルリポジトリよりリモートリポジトリが進んでいる場合、プッシュが行えないことがある。この場合はgit pullと打ち込み、ローカルリポジトリをリモートリポジトリに合わせた（更新した）上でgit push -u origin featureを行う。

----------------------------------
【プルリクエストの作成】

# リモートリポジトリの所有者や他の開発者に自分の更新内容を受け入れてもらう。

1. ブラウザで https://github.com/myaccount/rapm にアクセスする。（my accountは自分のアカウント名）。

2. 右端のCompare & pull requestボタンをクリック。

3. branchnameをmasterにマージしてもらいたいのであれば、左上のボタンでbase:masterとcompare:branchnameになっていることを確認する。

4. Writeというフォームにコミットの理由（なぜ編集を行ったか）を入力。これはリモートリポジトリの管理者にマージの必要性を訴えるために使える。何も入れないのも可。

5. 左下のCreate pull requestボタンをクリック。


==================================
■ 新規リポジトリを作成しての作業 ■

----------------------------------
【ローカルリポジトリの新規作成】

# リモートリポジトリにコピーするためのローカルリポジトリを作成する。

1. 好きな場所に作業ディレクトリを作る。たとえばmkdir MYPRO。（MYPROには好きな名前をつける）

2. cd MYPROで作業ディレクトリ内に移動。

3. git initでローカルリポジトリ作成。ls -lartで.gitというディレクトリが作られていることを確認。

4. 作業ディレクトリの中に任意のファイルを作っておいておく。.gitの中身はいじらないこと！

5. git statusで現状を確認。

6. git add . でstageする。

7. git commitでコミットする。

----------------------------------
【GitHub上で新規リモートリポジトリの作成】

# 新しいリモートリポジトリの所有者となり、GitHub上で作成を行う。

1. githubの自分のアカウントのページから右上の「+」をクリックし、New repositoryを選択。

2. Repository nameを入力し、必要であればDescriptionに記入した上で一番下のCreate repositoryをクリック。

3. 表示される以下のコードをターミナル上にコピペすれば自分のローカルリポジトリの内容がリモートリポジトリにコピーされる。

git remote delete origin
git remote add origin git@github.com:MYACCOUNT/MYPRO.git
git push -u origin master

----------------------------------
【ローカルリポジトリへのフェッチとマージ】

# リモートリポジトリの内容をローカルリポジトリにコピーする。

1. git fetchでリモートリポジトリの最新の内容をローカルのリモート追跡ブランチにコピーする。

2. git merge origin/masterによって現在作業しているブランチを（originと名付けた）リモート追跡ブランチと一致させる。競合が発生した場合はその旨表示されるので、自分のファイルの方を修正し、再度git add, git commitを行った上でgit mergeするとよい。

3. ローカルブランチの内容をリモートリポジトリの内容で上書きするには以下のようにする。

git reset --hard origin/master

なお、git fetchとgit merge origin/masterはgit pullというコマンドで一括して行うこともできる。これを行うことを他の開発者に依頼するのがpull requestである。

----------------------------------
【リモートリポジトリにおけるマージ】

# リモートリポジトリの所有者（owner）と協力者（collaborator）はpull requestを受け取ると、追加されたブランチをmasterブランチにマージできる。

1. Merge pull requestボタンをクリック。

2. Confirm mergeボタンをクリック。

3. Delete branchボタンを押して不要なブランチを削除。

----------------------------------
 【Issueの利用】

# プロジェクトにおける課題をシェアする機能であるIssueを利用する。

1. GitHub上のプロジェクトのページ（今回はrapm）でIssuesというタブを選択。

2. 右上にある緑色のNew issueボタンをクリック。

3. 課題のタイトルと内容をフォームに記入し、下にある緑色のSubmit new issueボタンをクリック。

4. フォームの右上にある小さなアイコンをクリックすることで、プルリクエストやユーザを各Issueに紐付けることが可能。

5. 右端にあるLabelsでラベル付けが可能。Milestoneで締切の設定が可能。ただしMilestonesはIssuesタブのトップで事前に作成しておく必要がある。Labelsも同様の方法で新しいラベルを追加できる。

